üîπ Core Functionalities & Features
‚úÖ 1. User Authentication (Master Password Login) [Implemented]
Users must create a master password during setup.
The master password is hashed using bcrypt before storing.
Users must enter their master password to unlock the application.
JWT tokens are used for session management.
‚úÖ 2. Secure Password Storage (AES-256 Encryption) [In Progress]
All saved passwords are encrypted before being stored in MongoDB.
AES-256 encryption is used with a user-specific key derived from the master password.
Passwords can only be decrypted after authentication.
‚úÖ 3. Password Generator [Implemented]
Users can generate strong, random passwords based on length and character preferences.
Options to include uppercase, lowercase, numbers, and special characters.
‚öôÔ∏è 4. Password Retrieval & Search [Upcoming]
Users can search passwords by website, app name, or custom tags.
Filtering & sorting options to manage large password lists.
‚öôÔ∏è 5. Local Backup & Restore [Upcoming]
Users can export their passwords into a locally encrypted file (JSON/CSV).
The app allows users to restore encrypted backups using their master password.
‚è≥ 6. Categorization (Optional)
Users can organize passwords into categories: Social, Banking, Work, Personal, etc.
Custom categories can be added, edited, and deleted.
‚è≥ 7. Clipboard Auto-Clear (Security Enhancement)
When a password is copied, it will be automatically cleared from the clipboard after a set time (e.g., 30 seconds).
‚è≥ 8. UI Enhancements (Dark Mode & Custom Themes)
Users can switch between light mode and dark mode.
Custom themes for UI personalization.
‚ùå 9. Autofill Feature (Chrome Extension) [Deferred]
A Chrome extension would allow automatic form filling.
Not included in this phase due to complexity and security risks.
üîπ Technical Requirements & Development Stack
üñ•Ô∏è Tech Stack (MERN)
Frontend: React (Vite) + Tailwind CSS
Backend: Node.js + Express.js
Database: MongoDB (Local)
Security: AES-256 Encryption (Crypto-JS), JWT Authentication, bcrypt for hashing
üîê Security Considerations
Zero Cloud Dependency ‚Äì All data is stored locally.
Encryption Before Storage ‚Äì No plain-text passwords are ever stored.
Secure Backup Files ‚Äì Exported data remains encrypted.
Brute Force Protection ‚Äì Lock accounts after multiple failed login attempts.
‚ö° Performance Requirements
Search must return results in under 1 second.
Encrypted passwords must be retrieved and decrypted instantly.
Password generation should happen in real-time.
üîπ Expected Deliverables
Fully Functional Offline Password Manager
User-friendly Dashboard with Password Search & Management
Secure Local Storage with Encrypted Backups
Password Generator & Clipboard Auto-Clear for Security
Dark Mode & UI Customization
üõ†Ô∏è Development Plan
1Ô∏è‚É£ Setup Backend & Database (User Authentication, Encryption, JWT)
2Ô∏è‚É£ Implement Secure Password Storage & Retrieval
3Ô∏è‚É£ Build React Frontend (Dashboard, Forms, UI Enhancements)
4Ô∏è‚É£ Implement Search, Backup, and Password Generator
5Ô∏è‚É£ Test Security & Optimize Performance
6Ô∏è‚É£ Optional: Add Dark Mode, Clipboard Auto-Clear

üéØ Instructions for AI Model
Generate a MERN stack application with secure user authentication & password storage.
Ensure all passwords are encrypted using AES-256 before saving.
Implement local-only data storage in MongoDB (no cloud).
Provide API endpoints for password management (CRUD operations).
Implement a frontend in React with Tailwind CSS.
Allow users to export and restore encrypted password backups.